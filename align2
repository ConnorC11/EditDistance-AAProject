uni = []
def med_recursive(s1, s2):
    n = len(s1)
    m = len(s2)
    # base cases
    if n == 0 and m == 0:
        return 0
    if n == 0:
        return m
    if m == 0:
        return n
    # recursive definition

    # mcon = []
    con1 = med_recursive(s1[:-1], s2) + 1   # Deletion
    con2 = med_recursive(s1, s2[:-1]) + 1   # Insertion
    con3 = med_recursive(s1[:-1], s2[:-1]) + (s1[-1] != s2[-1])   # Substitution

    global uni

    if min(con1, con2, con3) == con1:
        uni.append('D')
    if min(con1, con2, con3) == con3:
        uni.append('S')
    else:
        uni.append('I')
    return min(con1, con2, con3)

s1="SUNDACY"
s2="MONDAY"

    # create the alignment\

def alignment(s1,s2):

    ss = ''
    tt = ''
    mark = ''

    i = len(s1) + 1
    j = len(s2) + 1
    k = 1

    while 1:
        if uni[-k] == 'I':
            ss += s1[i - 2] + ' '
            tt += '-' + ' '
            mark += ' ' + ' '
            i = i - 1
            k = k + 1
        if uni[-k] == 'S':
            ss += s1[i - 2] + ' '
            tt += s2[j - 2] + ' '
            if s1[i - 2] == s2[j - 2]:
                mark += '|' + ' '
            else:
                mark += ' ' + ' '
            i = i - 1
            j = j - 1
            k = k + 1
        if uni[-k] == 'D':
            ss += '-' + ' '
            tt += s2[j - 2] + ' '
            mark += ' ' + ' '
            j = j - 1
            k = k + 1
        if i == 0 & j == 0:  # 시작점
            break
    print(ss)
    print(mark)
    print(tt)

    return



print(med_recursive(s1,s2))
print(alignment(s1,s2))
# print(uni)
